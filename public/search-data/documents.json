[
  {
    "slug": "/introduction/changelog",
    "title": "Changelog",
    "description": "Changelogs and improvements to the Documents projects.",
    "content": ""
  },
  {
    "slug": "/introduction",
    "title": "Introduction",
    "description": "This section provides an overview of how to get started with the Documents, Next.js Document Starter Kit.",
    "content": "![Banner](/images/banner.png \"Documents\")\n\n## LangChain\n\n**LangChain** is a framework for developing applications powered by large language models (LLMs).\n\n**LangChain** simplifies every stage of the LLM application lifecycle:\n\n* **Development**: Build your applications using LangChain's open-source components and third-party integrations. Use LangGraph to build stateful agents with first-class streaming and human-in-the-loop support.\n* **Productionization**: Use LangSmith to inspect, monitor and evaluate your applications, so that you can continuously optimize and deploy with confidence.\n* **Deployment**: Turn your LangGraph applications into production-ready APIs and Assistants with LangGraph Platform.\n\n<CardGrid>\n  <Card subtitle=\"Instructions\" title=\"Installation\" description=\"Get started with LangChain using our quick start installation guide to get your project started.\" href=\"/docs/introduction/installation\" />\n\n  <Card subtitle=\"Setup\" title=\"Site Settings\" description=\"Setting up your LangChain projects layout, links and search engine optimisation.\" href=\"/docs/introduction/setup\" />\n\n  <Card subtitle=\"Support\" title=\"Technology, Information and Internet\" description=\"We're on a mission to make it easy to build the LLM apps of tomorrow, today.\" href=\"https://github.com/langchain-ai\" external={true} />\n</CardGrid>\n\n## Why LangChain?\n\nThe goal of the langchain package and LangChain the company is to make it as easy possible for developers to build applications that reason.\r\nWhile LangChain originally started as a single open source package, it has evolved into a company and a whole ecosystem. This page will talk about the\r\nLangChain ecosystem as a whole. Most of the components within in the LangChain ecosystem can be used by themselves - so if you feel particularly drawn to\r\ncertain components but not others, that is totally fine! Pick and choose whichever components you like best.\n\n## Key Features\n\nThere are several primary needs that LangChain aims to address:\n\n| Feature                               | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\r\n| ------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| **Standardized component interfaces** | The growing number of models and related components for AI applications has resulted in a wide variety of different APIs that developers need to learn and use. This diversity can make it challenging for developers to switch between providers or combine components when building applications. LangChain exposes a standard interface for key components, making it easy to switch between providers.                                                                    |\r\n| **Orchestration**                     | As applications become more complex, combining multiple components and models, there's a growing need to efficiently connect these elements into control flows that can accomplish diverse tasks. Orchestration is crucial for building such applications.                                                                                                                                                                                                                    |\r\n| **Observability and evaluation**      | As applications become more complex, it becomes increasingly difficult to understand what is happening within them. Furthermore, the pace of development can become rate-limited by the paradox of choice: for example, developers often wonder how to engineer their prompt or which LLM best balances accuracy, latency, and cost. Observability and evaluations can help developers monitor their applications and rapidly answer these types of questions with confidence |\n\n## How to Use These Documents\n\nYou'll find the documentation's navigation bar on the left side of the screen. The pages are organized in a logical sequence, progressing from foundational\r\ntopics to more advanced concepts, allowing you to follow along step-by-step as you build your documentation. However, feel free to explore the content in\r\nany order, selecting the sections most relevant to your use case.\n\nOn the right side of the screen, a table of contents provides easy navigation between sections of each page. For quick access to specific content, you can\r\nuse the search bar at the top or the search shortcut (`Ctrl+K` or `Cmd+K`).\n\nHead over to the [Installation Guide](/docs/introduction/installation).\n\n## Join our Community\n\nIf you have questions about anything related to LangChain, you're always welcome to ask our community on\r\n[GitHub](https://github.com/langchain-ai/langchainjs) and [X (Twitter)](https://twitter.com/LangChainAI).\n"
  },
  {
    "slug": "/introduction/installation",
    "title": "Installation",
    "description": "This guide covers the installation of LangChain and how to use it in your project.",
    "content": "To install and use LangChain, you need to have several prerequisites in place. Here's a list of all the essential pre-requisites\r\nfor setting up and working on this project.\n\n## Prerequisites\n\n<Step>\n  <StepItem title=\"LangChain is written in TypeScript and can be used in:\">\n    * **Node.js** (ESM and CommonJS) - 18.x, 19.x, 20.x\n    * **Cloudflare Workers**\n    * **Vercel / Next.js** (Browser, Serverless and Edge functions)\n    * **Supabase Edge Functions**\n    * **Browser**\n    * **Deno**\n    * **Bun**\n\n    However, note that individual integrations may not be supported in all environments.\n  </StepItem>\n</Step>\n\n## Installation\n\n<Step>\n  <StepItem title=\"The main LangChain packages\">\n    To install the main langchain package, run:\n\n    ```bash\n    npm install langchain @langchain/core\n    ```\n\n    While this package acts as a sane starting point to using LangChain, much of the value of LangChain comes when integrating it with various model providers, datastores, etc. By default, the dependencies needed to do that are NOT installed. You will need to install the dependencies for specific integrations separately. We'll show how to do that in the next sections of this guide.\n\n    Please also see the section on installing integration packages for some special considerations when installing LangChain packages.\n  </StepItem>\n\n  <StepItem title=\"How to install ecosystem packages\">\n    With the exception of the langsmith SDK, all packages in the LangChain ecosystem depend on @langchain/core, which contains base classes and abstractions that other packages use. The dependency graph below shows how the difference packages are related. A directed arrow indicates that the source package depends on the target package:\n\n    <Note title=\"Note\" type=\"danger\">\n      It is important that your app only uses one version of @langchain/core. Common\r\n      package managers may introduce additional versions when resolving direct\r\n      dependencies, even if you don't intend this. See this section on installing\r\n      integration packages for more information and ways to remedy this.\n    </Note>\n\n     \n\n    <StepItem title=\"@langchain/community\">\n      The **@langchain/community** package contains a range of third-party integrations. Install with:\n\n      ```bash\n      npm install @langchain/community @langchain/core\n      ```\n\n      There are also more granular packages containing LangChain integrations for individual providers.\n    </StepItem>\n\n     \n\n    <StepItem title=\"@langchain/core\">\n      The **@langchain/core** package contains base abstractions that the rest of the LangChain ecosystem uses, along with the LangChain Expression Language. It should be installed separately:\n\n      ```bash\n      npm install @langchain/core\n      ```\n    </StepItem>\n\n     \n\n    <StepItem title=\"LangGraph\">\n      **LangGraph.js** is a library for building stateful, multi-actor applications with LLMs. It integrates smoothly with LangChain, but can be used without it.\n\n      Install with:\n\n      ```bash\n      npm install @langchain/langgraph @langchain/core\n      ```\n    </StepItem>\n\n     \n\n    <StepItem title=\"LangSmith SDK\">\n      The **LangSmith SDK** is automatically installed by LangChain. If you're not using it with LangChain, install with:\n\n      ```bash\n      npm install langsmith\n      ```\n    </StepItem>\n  </StepItem>\n\n  <StepItem title=\"Installing integration packages\">\n    To install the main langchain package, run:\n\n    ```bash\n    npm install langchain @langchain/core\n    ```\n\n    LangChain supports packages that contain module integrations with individual third-party providers. They can be as specific as @langchain/anthropic, which contains integrations just for Anthropic models, or as broad as @langchain/community, which contains broader variety of community contributed integrations.\n\n    These packages, as well as the main LangChain package, all have @langchain/core as a peer dependency to avoid package managers installing multiple versions of the same package. It contains the base abstractions that these integration packages extend.\n\n    To ensure that all integrations and their types interact with each other properly, it is important that they all use the same version of @langchain/core. If you encounter type errors around base classes, you may need to guarantee that your package manager is resolving a single version of @langchain/core. To do so, you can add a \"resolutions\" or \"overrides\" field like the following in your project's package.json. The name will depend on your package manager:\n\n    <Note title=\"TIP\" type=\"success\">\n      The **resolutions** or **pnpm.overrides** fields for **yarn** or **pnpm** must\r\n      be set in the root **package.json** file.\n    </Note>\n\n    If you are using **yarn**:\n\n    <Note title=\"yarn package.json\" type=\"note\">\n      ```bash\n      {\r\n        \"name\": \"your-project\",\r\n        \"version\": \"0.0.0\",\r\n        \"private\": true,\r\n        \"engines\": {\r\n          \"node\": \">=18\"\r\n        },\r\n        \"dependencies\": {\r\n          \"@langchain/anthropic\": \"^0.0.2\",\r\n          \"@langchain/core\": \"^0.3.0\",\r\n          \"langchain\": \"0.0.207\"\r\n        },\r\n        \"resolutions\": {\r\n          \"@langchain/core\": \"0.3.0\"\r\n        }\r\n      }\n      ```\n    </Note>\n\n    You can also try running the **yarn dedupe** command if you are on **yarn** version 2 or higher.\n\n    Or for **npm**:\n\n    <Note title=\"npm package.json\" type=\"note\">\n      ```bash\n      {\r\n        \"name\": \"your-project\",\r\n        \"version\": \"0.0.0\",\r\n        \"private\": true,\r\n        \"engines\": {\r\n          \"node\": \">=18\"\r\n        },\r\n        \"dependencies\": {\r\n          \"@langchain/anthropic\": \"^0.0.2\",\r\n          \"@langchain/core\": \"^0.3.0\",\r\n          \"langchain\": \"0.0.207\"\r\n        },\r\n        \"overrides\": {\r\n          \"@langchain/core\": \"0.3.0\"\r\n        }\r\n      }\n      ```\n    </Note>\n\n    You can also try the **npm dedupe** command.\n\n    Or for **pnpm**:\n\n    <Note title=\"pnpm package.json\" type=\"note\">\n      ```bash\n      {\r\n        \"name\": \"your-project\",\r\n        \"version\": \"0.0.0\",\r\n        \"private\": true,\r\n        \"engines\": {\r\n          \"node\": \">=18\"\r\n        },\r\n        \"dependencies\": {\r\n          \"@langchain/anthropic\": \"^0.0.2\",\r\n          \"@langchain/core\": \"^0.3.0\",\r\n          \"langchain\": \"0.0.207\"\r\n        },\r\n        \"pnpm\": {\r\n          \"overrides\": {\r\n            \"@langchain/core\": \"0.3.0\"\r\n          }\r\n        }\r\n      }\n      ```\n    </Note>\n\n    You can also try the **pnpm dedupe** command.\n  </StepItem>\n\n  <StepItem title=\"Loading the library\">\n    <StepItem title=\"TypeScript\">\n      LangChain is written in TypeScript and provides type definitions for all of its public APIs.\n    </StepItem>\n\n     \n\n    <StepItem title=\"ESM\">\n      LangChain provides an ESM build targeting Node.js environments. You can import it using the following syntax:\n\n      ```bash\n      npm install @langchain/openai @langchain/core\n      ```\n\n      <Note title=\"Import\" type=\"note\">\n        `bash import {ChatOpenAI} from \"@langchain/openai\"; `\n      </Note>\n\n      If you are using TypeScript in an ESM project we suggest updating your tsconfig.json to include the following:\n\n      <Note title=\"tsconfig.json\" type=\"note\">\n        ```bash\n        {\r\n          \"compilerOptions\": {\r\n            ...\r\n            \"target\": \"ES2020\", // or higher\r\n            \"module\": \"nodenext\",\r\n          }\r\n        }\n        ```\n      </Note>\n    </StepItem>\n\n     \n\n    <StepItem title=\"CommonJS\">\n      LangChain provides a CommonJS build targeting Node.js environments. You can import it using the following syntax:\n\n      <Note title=\"Import\" type=\"note\">\n        ```bash\n        const {ChatOpenAI} = require(\"@langchain/openai\"); \n        ```\n      </Note>\n    </StepItem>\n\n     \n\n    <StepItem title=\"Cloudflare Workers\">\n      LangChain can be used in Cloudflare Workers. You can import it using the following syntax:\n\n      <Note title=\"Import\" type=\"note\">\n        ```bash\n        import { ChatOpenAI } from \"@langchain/openai\";\n        ```\n      </Note>\n    </StepItem>\n\n     \n\n    <StepItem title=\"Vercel / Next.js\">\n      LangChain can be used in Vercel / Next.js. We support using LangChain in frontend components, in Serverless functions and in Edge functions. You can import it using the following syntax:\n\n      <Note title=\"Import\" type=\"note\">\n        ```bash\n        import { ChatOpenAI } from \"@langchain/openai\";\n        ```\n      </Note>\n    </StepItem>\n\n     \n\n    <StepItem title=\"Deno / Supabase Edge Functions\">\n      LangChain can be used in Deno / Supabase Edge Functions. You can import it using the following syntax:\n\n      <Note title=\"Import\" type=\"note\">\n        ```bash\n        import { ChatOpenAI } from \"https://esm.sh/@langchain/openai\";\n        ```\n      </Note>\n\n      or\n\n      <Note title=\"Import\" type=\"note\">\n        ```bash\n        import { ChatOpenAI } from \"npm:@langchain/openai\";\n        ```\n      </Note>\n    </StepItem>\n\n     \n\n    <StepItem title=\"Browser\">\n      LangChain can be used in the browser. In our CI we test bundling LangChain with Webpack and Vite, but other bundlers should work too. You can import it using the following syntax:\n\n      <Note title=\"Import\" type=\"note\">\n        ```bash\n        import { ChatOpenAI } from \"@langchain/openai\";\n        ```\n      </Note>\n    </StepItem>\n\n     \n\n    <StepItem title=\"Unsupported: Node.js 16\">\n      We do not support Node.js 16, but if you still want to run LangChain on Node.js 16, you will need to follow the instructions in this section. We do not guarantee that these instructions will continue to work in the future.\n\n      You will have to make fetch available globally, either:\n\n      * run your application with **NODE\\_OPTIONS='--experimental-fetch' node ...**, or\n      * install **node-fetch** and follow the instructions **here**\r\n        You'll also need to polyfill **ReadableStream** by installing:\n\n      ```bash\n        npm i web-streams-polyfill@4\n      ```\n\n      And then adding it to the global namespace in your main entrypoint:\n\n      <Note title=\"Import\" type=\"note\">\n        ```bash\n        import \"web-streams-polyfill/polyfill\";\n        ```\n      </Note>\n\n      Additionally you'll have to polyfill **structuredClone**, eg. by installing **core-js** and following the instructions **here**.\n\n      If you are running Node.js 18+, you do not need to do anything.\n    </StepItem>\n  </StepItem>\n</Step>\n\n## Was this page helpful?\n\nYou can also leave detailed feedback on [GitHub](https://github.com/langchain-ai/langchainjs).\n"
  },
  {
    "slug": "/introduction/setup",
    "title": "Setup",
    "description": "Setting up and configuring your documentation project",
    "content": "Setting up your new documentation project is straightforward. Most of the essential project settings can be configured within the `settings` folder.\n\n## Settings\n\nThis section provides the core settings for your documentation site, such as defining the site's URL, site icon and title.\n\n```tsx showLineNumbers\nexport const url = \"\"; // The URL for your documentation site\r\nexport const siteicon = \"\"; // Icon displayed next to the site name in the header\r\nexport const sitename = \"\"; // Title of your documentation site\n```\n\n## Google Tags\n\nThis section allows you to integrate Google Tag Manager into your documentation project. You can add your GTM code and configure whether it's connected.\n\n```tsx showLineNumbers\nexport const gtm = \"\"; // Add your Google Tag Manager code here\r\nexport const gtmconnected = true; // Set to true if GTM is connected, otherwise set to false\n```\n\n## Search Engine\n\nConfigure essential SEO settings to ensure your documentation site is optimized for search engines. This includes meta descriptions, keywords and social media sharing details like images and alt text.\n\n```tsx showLineNumbers\nexport const description = \"\"; // Description of your documentation site for SEO\r\nexport const keywords = [\"\", \"\"]; // List of SEO keywords for your documentation site\r\nexport const urlimage = \"\"; // The URL of the image used when sharing on social media)\r\nexport const imagealt = \"\"; // Alt text for shared images, helpful for screen readers\r\nexport const twitterhandle = \"\"; // Your company’s Twitter handle for social sharing\n```\n\n## Footer Branding\n\nThe footer settings allow you to customize the company information displayed at the bottom of the site. You can add the company name and the URL that the name will link to.\n\n```tsx showLineNumbers\nexport const companyname = \"\"; // The company name displayed in the copyright section\r\nexport const companylink = \"\"; // The URL your company name should link to\n```\n\n## General Layout\n\nThe layout settings control the appearance and functionality of various elements of the documentation site, such as branding, the right sidebar, feedback options, table of contents, and scroll-to-top functionality.\n\n```tsx showLineNumbers\nexport const branding = true; // Set to true to display our branding elements\r\nexport const rightsidebar = true; // Set to true to enable the right sidebar with feedback, table of contents and scroll-to-top\r\nexport const feedbackedit = true; // Control to enable/disable feedback on GitHub\r\nexport const tableofcontent = true; // Control to enable/disable the generated table of contents\r\nexport const totopscroll = true; // Control to enable/disable scroll-to-top button\n```\n\n## Github Control\n\nIf your MDX files are hosted on GitHub, you can configure the project to load documents directly from there. This option can be useful for syncing documentation updates directly with your repository.\n\n```tsx showLineNumbers\nexport const loadfromgithub = false; // Set to true to load your MDX documents directly from GitHub\n```\n\n## Project Structure\n\n<CardGrid>\n  <Card title=\"Navigation\" href=\"/docs/navigation\" icon=\"alignJustify\" variant=\"small\" description=\"Creating your navigation\" />\n</CardGrid>\n"
  },
  {
    "slug": "/markup/cards",
    "title": "Cards",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n## Small Card\n\n<CardGrid>\n  <Card title=\"Page Structure\" href=\"/docs/deep/deeper\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n\n  <Card title=\"Page Structure\" href=\"/docs/deep/deeper\" icon=\"alignJustify\" variant=\"small\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" icon=\"alignJustify\" external={true} variant=\"small\" />\n</CardGrid>\n\n## Large Card\n\n<CardGrid>\n  <Card subtitle=\"Instructions\" title=\"Installation\" description=\"Get started with Documents using our quick start installation guide to get your project started.\" href=\"/docs/introduction/installation\" />\n\n  <Card subtitle=\"Setup\" title=\"Site Settings\" description=\"Setting up your Documents projects layout, links and search engine optimisation.\" href=\"/docs/introduction/setup\" />\n\n  <Card subtitle=\"Support\" title=\"Rubix Studios\" description=\"Australia's leading branding, marketing and web development company.\" href=\"https://www.rubixstudios.com.au/\" external={true} />\n</CardGrid>\n\n## Image Card\n\n<CardGrid>\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" image=\"/images/og-image.png\" external={true} variant=\"image\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" image=\"/images/og-image.png\" variant=\"image\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" image=\"/images/og-image.png\" variant=\"image\" />\n</CardGrid>\n"
  },
  {
    "slug": "/markup/diagrams",
    "title": "Diagrams",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n## Flowchart\n\n## Decision Tree\n\n## Entity-Relationship Diagram\n"
  },
  {
    "slug": "/markup/filetree",
    "title": "Filetree",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n<FileTree>\n  <Folder name=\"src\" label=\"Source Code\">\n    <File name=\"index.tsx\" label=\"index.tsx\" />\n\n    <Folder name=\"components\" label=\"Components\">\n      <File name=\"button.tsx\" label=\"Button Component\" />\n\n      <File name=\"input.tsx\" label=\"Input Component\" />\n    </Folder>\n\n    <Folder name=\"pages\" label=\"Pages\">\n      <File name=\"home.tsx\" label=\"Home Page\" />\n\n      <File name=\"about.tsx\" label=\"About Page\" />\n    </Folder>\n  </Folder>\n</FileTree>\n"
  },
  {
    "slug": "/markup",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n# Sample Document with Mermaid\n\nHere is a Mermaid diagram:\n\nThis diagram should render automatically without any extra imports.\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nThank you for choosing the Documentation Template for your project. Whether you're documenting software, APIs, or processes, we're here to support you in creating clear and effective documentation. Happy documenting!\n"
  },
  {
    "slug": "/markup/lists",
    "title": "Lists",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n## Checklist\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n## Simple List\n\n* Item 1\n* Item 2\n* Item 3\n\n## Number List\n\n1. Research\n2. Draft the content\n3. Review and edit\n4. Publish\n\n## Nested List\n\n* Main Category 1\n  * Sub Item 1.1\n  * Sub Item 1.2\n* Main Category 2\n  * Sub Item 2.1\n  * Sub Item 2.2\n"
  },
  {
    "slug": "/markup/maths",
    "title": "Maths",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n## Basic Algebra\n\nThe area of a circle ($$A$$) can be calculated using the radius ($$r$$) as follows:\n\n```math\nA = \\pi r^2\n```\n\n## Quadratic Formula\n\nThe quadratic formula for solving an equation of the form $$ax^2 + bx + c = 0$$ is:\n\n```math\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n```\n\n## Newton's Second Law of Motion\n\nNewton's second law of motion states that force ($$F$$) is the product of mass ($$m$$) and acceleration ($$a$$):\n\n```math\nF = ma\n```\n\n## Pythagorean Theorem\n\nThe Pythagorean theorem relates the lengths of the sides of a right triangle:\n\n```math\na^2 + b^2 = c^2\n```\n\n## Einstein's Mass-Energy Equivalence\n\nEinstein's famous equation relates energy ($$E$$), mass ($$m$$), and the speed of light ($$c$$):\n\n```math\nE = mc^2\n```\n"
  },
  {
    "slug": "/markup/notes",
    "title": "Notes",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n## Standard Note\n\n<Note title=\"Required\">\n  The project's search functionality relies on the Husky's automation to build `search-data/documents.json` ensure git commit is performed to generate this file.\n</Note>\n\n## Success Note\n\n<Note title=\"Required\" type=\"success\">\n  The project's search functionality relies on the Husky's automation to build `search-data/documents.json` ensure git commit is performed to generate this file.\n</Note>\n\n## Warning Note\n\n<Note title=\"Required\" type=\"warning\">\n  The project's search functionality relies on the Husky's automation to build `search-data/documents.json` ensure git commit is performed to generate this file.\n</Note>\n\n## Danger Note\n\n<Note title=\"Required\" type=\"danger\">\n  The project's search functionality relies on the Husky's automation to build `search-data/documents.json` ensure git commit is performed to generate this file.\n</Note>\n"
  },
  {
    "slug": "/markup/steps",
    "title": "Steps",
    "description": "This section provides an overview of Introduction.",
    "content": "The `<Step>` and `<StepItem>` components allow you to create structured step-by-step guides in your documentation. These components are particularly useful when you want to break down a process or tutorial into easy-to-follow stages.\n\n## Steps\n\nTo create a step-by-step guide in your MDX, you can use the following structure:\n\n<Step>\n  <StepItem title=\"Install Node.js\">\n    Make sure you have Node.js installed on your machine. You can download it from [here](https://nodejs.org).\n\n    To verify the installation, run the following command:\n\n    ```bash\n    node -v\n    ```\n  </StepItem>\n\n  <StepItem title=\"Install Dependencies\">\n    After cloning the repository, navigate to the project directory and install the necessary dependencies:\n\n    ```bash\n    npm install\n    ```\n  </StepItem>\n\n  <StepItem title=\"Run the Project\">\n    Start the development server:\n\n    ```bash\n    npm run dev\n    ```\n\n    You can access the application at:\n\n    ```bash\n    http://localhost:3000\n    ```\n  </StepItem>\n</Step>\n"
  },
  {
    "slug": "/markup/table",
    "title": "Table",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n| Feature     | Documentation Link | Notes                  |\r\n| :---------- | :----------------: | ----------------------: |\r\n| **Feature A**| [Docs](#)           | For more info click here |\r\n| **Feature B**| [Guide](#)          | See the full guide here  |\r\n| **Feature C**| [Setup](#)          | Setup instructions       |\n"
  },
  {
    "slug": "/markup/tabs",
    "title": "Tabs",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n"
  },
  {
    "slug": "/random",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nAdding some random stuff to change the code\n"
  },
  {
    "slug": "/structure/deeper/even-deeper",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n<CardGrid>\n  <Card title=\"Page Structure\" href=\"/docs/deep/deeper\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n\n  <Card title=\"Page Structure\" href=\"/docs/deep/deeper\" icon=\"alignJustify\" variant=\"small\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" icon=\"alignJustify\" external={true} variant=\"small\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" image=\"/images/og-image.png\" external={true} variant=\"image\" />\n</CardGrid>\n"
  },
  {
    "slug": "/structure/deeper",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nThank you for choosing the Documentation Template for your project. Whether you're documenting software, APIs, or processes, we're here to support you in creating clear and effective documentation. Happy documenting!\n\n## Tabs Example\n"
  },
  {
    "slug": "/structure",
    "title": "Structure",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nThank you for choosing the Documentation Template for your project. Whether you're documenting software, APIs, or processes, we're here to support you in creating clear and effective documentation. Happy documenting!\n"
  },
  {
    "slug": "/tutorials/classification",
    "title": "Classify Text into Labels",
    "description": "",
    "content": "Tagging means labeling a document with classes such as:\n\n* sentiment\n* language\n* style (formal, informal etc.)\n* covered topics\n* political tendency\n\n![Banner](/images/classification.png \"Documents\")\n\n## Overview\n\nTagging has a few components:\n\n* **function**: Like **extraction**, tagging uses functions to specify how the model should tag a document\n* **schema**: defines how we want to tag the document\n\n## Quickstart\n\nLet’s see a very straightforward example of how we can use tool calling for tagging in LangChain. We’ll use the **.withStructuredOutput()**, supported on **selected chat models**.\n\n### Pick your chat model:\n\nInstall dependencies\n"
  },
  {
    "slug": "/tutorials/extraction",
    "title": "Build an Extraction Chain",
    "description": "",
    "content": "<Note title=\"Prerequisites\" type=\"note\">\n  This guide assumes familiarity with the following concepts:\n\n  * Chat Models\n  * Tools\n  * Tool calling\n</Note>\n\nIn this tutorial, we will build a chain to extract structured information from unstructured text.\n\n<Note title=\"INFO\" type=\"note\">\n  This tutorial will only work with models that support **function/tool calling**\n</Note>\n\n## Setup\n\n### Installation\n\nTo install LangChain run:\n"
  },
  {
    "slug": "/tutorials",
    "title": "Tutorials",
    "description": "New to LangChain or LLM app development in general? Read this material to quickly get up and running building your first applications.",
    "content": "## Get started\n\nFamiliarize yourself with LangChain's open-source components by building simple applications.\n\nIf you're looking to get started with chat models, vector stores, or other LangChain components from a specific provider, check out our supported integrations.\n\n* **Chat models and prompts**: Build a simple LLM application with prompt templates and chat models.\n* **Semantic search**: Build a semantic search engine over a PDF with document loaders, embedding models, and vector stores.\n* **Classification**: Classify text into categories or labels using chat models with structured outputs.\n* **Extraction**: Extract structured data from text and other unstructured media using chat models and few-shot examples.\n\nRefer to the how-to guides for more detail on using all LangChain components.\n\n## Orchestration\n\nGet started using LangGraph to assemble LangChain components into full-featured applications.\n\n* **Chatbots**: Build a chatbot that incorporates memory.\n* **Agents**: Build an agent with LangGraph.js that interacts with external tools.\n* **Retrieval Augmented Generation (RAG) Part 1**: Build an application that uses your own documents to inform its responses.\n* **Retrieval Augmented Generation (RAG) Part 2**: Build a RAG application that incorporates a memory of its user interactions and multi-step retrieval.\n* **Question-Answering with SQL**: Build a question-answering system that executes SQL queries to inform its responses.\n* **Summarization**: Generate summaries of (potentially long) texts.\n* **Question-Answering with Graph Databases**: Build a question-answering system that queries a graph database to inform its responses.\n\n## LangSmith\n\nLangSmith allows you to closely trace, monitor and evaluate your LLM application. It seamlessly integrates with LangChain, and you can use it to inspect and debug individual steps of your chains as you build.\n\nLangSmith documentation is hosted on a separate site. You can peruse **LangSmith tutorials here**.\n\n### Evaluation\n\nLangSmith helps you evaluate the performance of your LLM applications. The below tutorial is a great way to get started:\n\n* **Evaluate your LLM application**\n"
  },
  {
    "slug": "/tutorials/llm_chain",
    "title": "Build a simple LLM application with chat models and prompt templates",
    "description": "In this quickstart we’ll show you how to build a simple LLM application with LangChain. This application will translate text from English into another language. This is a relatively simple LLM application - it’s just a single LLM call plus some prompting. Still, this is a great way to get started with LangChain - a lot of features can be built with just some prompting and an LLM call!",
    "content": "After reading this tutorial, you’ll have a high level overview of:\n\n* Using language models\n\n* Using prompt templates\n\n* Debugging and tracing your application using LangSmith\n\nLet’s dive in!\n\n## Setup\n\n### Installation\n\nTo install LangChain run:\n"
  },
  {
    "slug": "/tutorials/retrievers",
    "title": "Build a semantic search engine",
    "description": "This tutorial will familiarize you with LangChain’s document loader, embedding, and vector store abstractions. These abstractions are designed to support retrieval of data– from (vector) databases and other sources– for integration with LLM workflows. They are important for applications that fetch data to be reasoned over as part of model inference, as in the case of retrieval-augmented generation, or RAG (see our RAG tutorial here).",
    "content": "Here we will build a search engine over a PDF document. This will allow us to retrieve passages in the PDF that are similar to an input query.\n\n## Concepts\n\nThis guide focuses on retrieval of text data. We will cover the following concepts:\n\n* Documents and document loaders;\n* Text splitters;\n* Embeddings;\n* Vector stores and retrievers.\n\n## Setup\n\n### Jupyter Notebook\n\nThis and other tutorials are perhaps most conveniently run in a Jupyter notebook. See here for instructions on how to install.\n\n### Installation\n\nThis guide requires **@langchain/community** and **pdf-parse**:\n"
  }
]